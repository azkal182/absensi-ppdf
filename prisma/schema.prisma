// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model User {
    id       Int        @id @default(autoincrement())
    username String     @unique
    name     String
    password String
    role     RoleUser?  @default(USER)
    roles    UserRole[]

    absensis   Absensi[]
    UserAsrama UserAsrama[] // Menghubungkan user dengan asrama
    Izin       Izin[]

    @@map("user")
}

enum RoleUser {
    ADMIN
    USER
    ASRAMA
}

model Role {
    id    Int        @id @default(autoincrement())
    name  String     @unique
    users UserRole[]
}

model UserRole {
    id     Int  @id @default(autoincrement())
    userId Int
    roleId Int
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@unique([userId, roleId]) // Mencegah duplikasi role untuk user yang sama
}

model UserAsrama {
    id       Int    @id @default(autoincrement())
    userId   Int
    asramaId Int
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    asrama   Asrama @relation(fields: [asramaId], references: [id], onDelete: Cascade)

    @@unique([userId, asramaId])
}

model Asrama {
    id         Int          @id @default(autoincrement())
    name       String       @unique
    classes    Kelas[]
    Absensi    Absensi[]
    UserAsrama UserAsrama[] // Menghubungkan asrama dengan user
    Siswa      Siswa[]
    Mengajar   Mengajar[]

    @@map("asrama")
}

model Kelas {
    id       Int       @id @default(autoincrement())
    name     String
    teacher  String
    asramaId Int
    asrama   Asrama    @relation(fields: [asramaId], references: [id])
    Siswas   Siswa[]
    Absensi  Absensi[]

    @@unique([name, asramaId, teacher])
    @@map("kelas")
}

model Siswa {
    id         Int       @id @default(autoincrement())
    name       String
    kelasId    Int?
    kelas      Kelas?    @relation(fields: [kelasId], references: [id])
    absesnis   Absensi[]
    asramaId   Int?
    asrama     Asrama?   @relation(fields: [asramaId], references: [id])
    pengurusId Int?
    pengurus   Pengurus? @relation(fields: [pengurusId], references: [id])
    status     Boolean   @default(true)

    izin Izin[]

    @@unique([name, kelasId])
    @@index([kelasId])
    @@map("siswa")
}

model Absensi {
    id       Int         @id @default(autoincrement())
    siswaId  Int
    siswa    Siswa       @relation(fields: [siswaId], references: [id])
    kelasId  Int
    kelas    Kelas       @relation(fields: [kelasId], references: [id])
    asramaId Int
    asrama   Asrama      @relation(fields: [asramaId], references: [id])
    date     DateTime    @default(now())
    status   StatusAbsen @default(HADIR)

    userId     Int
    user       User         @relation(fields: [userId], references: [id])
    JamAbsensi JamAbsensi[]

    @@index([kelasId, date, asramaId])
    @@map("absensi")
}

enum StatusAbsen {
    HADIR
    SAKIT
    IZIN
    ALFA
}

model JamAbsensi {
    id        Int     @id @default(autoincrement())
    absensiId Int
    absensi   Absensi @relation(fields: [absensiId], references: [id])

    jamKe  Int
    status StatusAbsen @default(HADIR)
    date   DateTime    @default(now())

    @@index([date])
    @@index([jamKe])
    @@map("jam_absensi")
}

model ReportWhatsapp {
    id         Int                @id @default(autoincrement())
    name       String
    jid        String
    telegramId String?
    type       TypeReportWhatsapp
    active     Boolean            @default(false)
    whatsapp   Boolean            @default(false)
    telegram   Boolean            @default(false)

    @@map("report_whatsapp")
}

enum TypeReportWhatsapp {
    GROUP
    PERSONAL
}

model Pengurus {
    id   Int    @id @default(autoincrement())
    name String

    Siswa Siswa[]
}

model Izin {
    id          Int       @id @default(autoincrement())
    description String
    jamKe       Int[]
    startDate   DateTime
    endDate     DateTime?
    onlyOneDay  Boolean
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    izinStatus  IzinEnum  @default(SAKIT)
    uks         Boolean   @default(false)
    komdis      Boolean   @default(false)
    keamanan    Boolean   @default(false)

    siswa   Siswa? @relation(fields: [siswaId], references: [id])
    siswaId Int?
    userId  Int
    user    User?  @relation(fields: [userId], references: [id])

    @@index([startDate, onlyOneDay, endDate])
}

enum IzinEnum {
    SAKIT
    PULANG
    IZIN
}

model Guru {
    id       Int        @id @default(autoincrement())
    name     String
    mengajar Mengajar[]
}

model Mengajar {
    id              Int               @id @default(autoincrement())
    Guru            Guru?             @relation(fields: [guruId], references: [id])
    guruId          Int?
    asramaId        Int
    asrama          Asrama            @relation(fields: [asramaId], references: [id])
    jadwalPelajaran JadwalPelajaran[]
}

model JadwalPelajaran {
    id          Int           @id @default(autoincrement())
    Mengajar    Mengajar?     @relation(fields: [mengajarId], references: [id])
    mengajarId  Int?
    hari        dayOfWeek
    jamKe       Int
    absensiGuru AbsensiGuru[]
}

enum dayOfWeek {
    SABTU
    MINGGU
    SENIN
    SELASA
    RABU
    KAMIS
}

model AbsensiGuru {
    id                Int                 @id @default(autoincrement())
    JadwalPelajaran   JadwalPelajaran     @relation(fields: [jadwalPelajaranId], references: [id])
    jadwalPelajaranId Int
    tanggal           DateTime
    status            statusKehadiranGuru
    catatan           String?
}

enum statusKehadiranGuru {
    HADIR
    IZIN
    SAKIT
    TELAT
    ALFA
}
